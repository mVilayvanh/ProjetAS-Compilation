Grammar

    0 $accept: Prog $end

    1 Prog: DeclarVarGlob DeclFoncts

    2 DeclarVarGlob: DeclarVarGlob TYPE DeclarateursGlob ';'
    3              | ε

    4 DeclarateursGlob: DeclarateursGlob ',' IDENT
    5                 | IDENT

    6 DeclFoncts: DeclFoncts DeclFonct
    7           | DeclFonct

    8 DeclFonct: EnTeteFonct Corps

    9 EnTeteFonct: TYPE IDENT '(' Parametres ')'
   10            | VOID IDENT '(' Parametres ')'

   11 Parametres: VOID
   12           | ListTypVar

   13 ListTypVar: ListTypVar ',' TYPE IDENT
   14           | TYPE IDENT

   15 Corps: '{' DeclarVarLoc SuiteInstr '}'

   16 DeclarVarLoc: DeclarVarLoc TYPE DeclarateursLoc ';'
   17             | ε

   18 DeclarateursLoc: DeclarateursLoc ',' IDENT Affectation
   19                | IDENT Affectation

   20 Affectation: '=' Exp
   21            | ε

   22 SuiteInstr: SuiteInstr Instr
   23           | ε

   24 Instr: LValue '=' Exp ';'
   25      | IF '(' Exp ')' Instr
   26      | IF '(' Exp ')' Instr ELSE Instr
   27      | WHILE '(' Exp ')' Instr
   28      | IDENT '(' Arguments ')' ';'
   29      | RETURN Exp ';'
   30      | RETURN ';'
   31      | '{' SuiteInstr '}'
   32      | ';'

   33 Exp: Exp OR TB
   34    | TB

   35 TB: TB AND FB
   36   | FB

   37 FB: FB EQ M
   38   | M

   39 M: M ORDER E
   40  | E

   41 E: E ADDSUB T
   42  | T

   43 T: T DIVSTAR F
   44  | F

   45 F: ADDSUB F
   46  | '!' F
   47  | '(' Exp ')'
   48  | NUM
   49  | CHARACTER
   50  | LValue
   51  | IDENT '(' Arguments ')'

   52 LValue: IDENT

   53 Arguments: ListExp
   54          | ε

   55 ListExp: ListExp ',' Exp
   56        | Exp


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 46
    '(' (40) 9 10 25 26 27 28 47 51
    ')' (41) 9 10 25 26 27 28 47 51
    ',' (44) 4 13 18 55
    ';' (59) 2 16 24 28 29 30 32
    '=' (61) 20 24
    '{' (123) 15 31
    '}' (125) 15 31
    error (256)
    TYPE <type> (258) 2 9 13 14 16
    VOID <type> (259) 10 11
    IF <type> (260) 25 26
    ELSE <type> (261) 26
    WHILE <type> (262) 27
    RETURN <type> (263) 29 30
    OR <type> (264) 33
    AND <type> (265) 35
    ORDER <type> (266) 39
    EQ <type> (267) 37
    IDENT <ident> (268) 4 5 9 10 13 14 18 19 28 51 52
    NUM <num> (269) 48
    CHARACTER <byte> (270) 49
    ADDSUB <byte> (271) 41 45
    DIVSTAR <byte> (272) 43
    THEN (273)


Nonterminals, with rules where they appear

    $accept (27)
        on left: 0
    Prog <node> (28)
        on left: 1
        on right: 0
    DeclarVarGlob <node> (29)
        on left: 2 3
        on right: 1 2
    DeclarateursGlob <node> (30)
        on left: 4 5
        on right: 2 4
    DeclFoncts <node> (31)
        on left: 6 7
        on right: 1 6
    DeclFonct <node> (32)
        on left: 8
        on right: 6 7
    EnTeteFonct <node> (33)
        on left: 9 10
        on right: 8
    Parametres <node> (34)
        on left: 11 12
        on right: 9 10
    ListTypVar <node> (35)
        on left: 13 14
        on right: 12 13
    Corps <node> (36)
        on left: 15
        on right: 8
    DeclarVarLoc <node> (37)
        on left: 16 17
        on right: 15 16
    DeclarateursLoc <node> (38)
        on left: 18 19
        on right: 16 18
    Affectation <node> (39)
        on left: 20 21
        on right: 18 19
    SuiteInstr <node> (40)
        on left: 22 23
        on right: 15 22 31
    Instr <node> (41)
        on left: 24 25 26 27 28 29 30 31 32
        on right: 22 25 26 27
    Exp <node> (42)
        on left: 33 34
        on right: 20 24 25 26 27 29 33 47 55 56
    TB <node> (43)
        on left: 35 36
        on right: 33 34 35
    FB <node> (44)
        on left: 37 38
        on right: 35 36 37
    M <node> (45)
        on left: 39 40
        on right: 37 38 39
    E <node> (46)
        on left: 41 42
        on right: 39 40 41
    T <node> (47)
        on left: 43 44
        on right: 41 42 43
    F <node> (48)
        on left: 45 46 47 48 49 50 51
        on right: 43 44 45 46
    LValue <node> (49)
        on left: 52
        on right: 24 50
    Arguments <node> (50)
        on left: 53 54
        on right: 28 51
    ListExp <node> (51)
        on left: 55 56
        on right: 53 55


State 0

    0 $accept: • Prog $end

    $default  reduce using rule 3 (DeclarVarGlob)

    Prog           go to state 1
    DeclarVarGlob  go to state 2


State 1

    0 $accept: Prog • $end

    $end  shift, and go to state 3


State 2

    1 Prog: DeclarVarGlob • DeclFoncts
    2 DeclarVarGlob: DeclarVarGlob • TYPE DeclarateursGlob ';'

    TYPE  shift, and go to state 4
    VOID  shift, and go to state 5

    DeclFoncts   go to state 6
    DeclFonct    go to state 7
    EnTeteFonct  go to state 8


State 3

    0 $accept: Prog $end •

    $default  accept


State 4

    2 DeclarVarGlob: DeclarVarGlob TYPE • DeclarateursGlob ';'
    9 EnTeteFonct: TYPE • IDENT '(' Parametres ')'

    IDENT  shift, and go to state 9

    DeclarateursGlob  go to state 10


State 5

   10 EnTeteFonct: VOID • IDENT '(' Parametres ')'

    IDENT  shift, and go to state 11


State 6

    1 Prog: DeclarVarGlob DeclFoncts •
    6 DeclFoncts: DeclFoncts • DeclFonct

    TYPE  shift, and go to state 12
    VOID  shift, and go to state 5

    $default  reduce using rule 1 (Prog)

    DeclFonct    go to state 13
    EnTeteFonct  go to state 8


State 7

    7 DeclFoncts: DeclFonct •

    $default  reduce using rule 7 (DeclFoncts)


State 8

    8 DeclFonct: EnTeteFonct • Corps

    '{'  shift, and go to state 14

    Corps  go to state 15


State 9

    5 DeclarateursGlob: IDENT •
    9 EnTeteFonct: TYPE IDENT • '(' Parametres ')'

    '('  shift, and go to state 16

    $default  reduce using rule 5 (DeclarateursGlob)


State 10

    2 DeclarVarGlob: DeclarVarGlob TYPE DeclarateursGlob • ';'
    4 DeclarateursGlob: DeclarateursGlob • ',' IDENT

    ';'  shift, and go to state 17
    ','  shift, and go to state 18


State 11

   10 EnTeteFonct: VOID IDENT • '(' Parametres ')'

    '('  shift, and go to state 19


State 12

    9 EnTeteFonct: TYPE • IDENT '(' Parametres ')'

    IDENT  shift, and go to state 20


State 13

    6 DeclFoncts: DeclFoncts DeclFonct •

    $default  reduce using rule 6 (DeclFoncts)


State 14

   15 Corps: '{' • DeclarVarLoc SuiteInstr '}'

    $default  reduce using rule 17 (DeclarVarLoc)

    DeclarVarLoc  go to state 21


State 15

    8 DeclFonct: EnTeteFonct Corps •

    $default  reduce using rule 8 (DeclFonct)


State 16

    9 EnTeteFonct: TYPE IDENT '(' • Parametres ')'

    TYPE  shift, and go to state 22
    VOID  shift, and go to state 23

    Parametres  go to state 24
    ListTypVar  go to state 25


State 17

    2 DeclarVarGlob: DeclarVarGlob TYPE DeclarateursGlob ';' •

    $default  reduce using rule 2 (DeclarVarGlob)


State 18

    4 DeclarateursGlob: DeclarateursGlob ',' • IDENT

    IDENT  shift, and go to state 26


State 19

   10 EnTeteFonct: VOID IDENT '(' • Parametres ')'

    TYPE  shift, and go to state 22
    VOID  shift, and go to state 23

    Parametres  go to state 27
    ListTypVar  go to state 25


State 20

    9 EnTeteFonct: TYPE IDENT • '(' Parametres ')'

    '('  shift, and go to state 16


State 21

   15 Corps: '{' DeclarVarLoc • SuiteInstr '}'
   16 DeclarVarLoc: DeclarVarLoc • TYPE DeclarateursLoc ';'

    TYPE  shift, and go to state 28

    $default  reduce using rule 23 (SuiteInstr)

    SuiteInstr  go to state 29


State 22

   14 ListTypVar: TYPE • IDENT

    IDENT  shift, and go to state 30


State 23

   11 Parametres: VOID •

    $default  reduce using rule 11 (Parametres)


State 24

    9 EnTeteFonct: TYPE IDENT '(' Parametres • ')'

    ')'  shift, and go to state 31


State 25

   12 Parametres: ListTypVar •
   13 ListTypVar: ListTypVar • ',' TYPE IDENT

    ','  shift, and go to state 32

    $default  reduce using rule 12 (Parametres)


State 26

    4 DeclarateursGlob: DeclarateursGlob ',' IDENT •

    $default  reduce using rule 4 (DeclarateursGlob)


State 27

   10 EnTeteFonct: VOID IDENT '(' Parametres • ')'

    ')'  shift, and go to state 33


State 28

   16 DeclarVarLoc: DeclarVarLoc TYPE • DeclarateursLoc ';'

    IDENT  shift, and go to state 34

    DeclarateursLoc  go to state 35


State 29

   15 Corps: '{' DeclarVarLoc SuiteInstr • '}'
   22 SuiteInstr: SuiteInstr • Instr

    IF      shift, and go to state 36
    WHILE   shift, and go to state 37
    RETURN  shift, and go to state 38
    IDENT   shift, and go to state 39
    ';'     shift, and go to state 40
    '{'     shift, and go to state 41
    '}'     shift, and go to state 42

    Instr   go to state 43
    LValue  go to state 44


State 30

   14 ListTypVar: TYPE IDENT •

    $default  reduce using rule 14 (ListTypVar)


State 31

    9 EnTeteFonct: TYPE IDENT '(' Parametres ')' •

    $default  reduce using rule 9 (EnTeteFonct)


State 32

   13 ListTypVar: ListTypVar ',' • TYPE IDENT

    TYPE  shift, and go to state 45


State 33

   10 EnTeteFonct: VOID IDENT '(' Parametres ')' •

    $default  reduce using rule 10 (EnTeteFonct)


State 34

   19 DeclarateursLoc: IDENT • Affectation

    '='  shift, and go to state 46

    $default  reduce using rule 21 (Affectation)

    Affectation  go to state 47


State 35

   16 DeclarVarLoc: DeclarVarLoc TYPE DeclarateursLoc • ';'
   18 DeclarateursLoc: DeclarateursLoc • ',' IDENT Affectation

    ';'  shift, and go to state 48
    ','  shift, and go to state 49


State 36

   25 Instr: IF • '(' Exp ')' Instr
   26      | IF • '(' Exp ')' Instr ELSE Instr

    '('  shift, and go to state 50


State 37

   27 Instr: WHILE • '(' Exp ')' Instr

    '('  shift, and go to state 51


State 38

   29 Instr: RETURN • Exp ';'
   30      | RETURN • ';'

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    ';'        shift, and go to state 56
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    Exp     go to state 59
    TB      go to state 60
    FB      go to state 61
    M       go to state 62
    E       go to state 63
    T       go to state 64
    F       go to state 65
    LValue  go to state 66


State 39

   28 Instr: IDENT • '(' Arguments ')' ';'
   52 LValue: IDENT •

    '('  shift, and go to state 67

    $default  reduce using rule 52 (LValue)


State 40

   32 Instr: ';' •

    $default  reduce using rule 32 (Instr)


State 41

   31 Instr: '{' • SuiteInstr '}'

    $default  reduce using rule 23 (SuiteInstr)

    SuiteInstr  go to state 68


State 42

   15 Corps: '{' DeclarVarLoc SuiteInstr '}' •

    $default  reduce using rule 15 (Corps)


State 43

   22 SuiteInstr: SuiteInstr Instr •

    $default  reduce using rule 22 (SuiteInstr)


State 44

   24 Instr: LValue • '=' Exp ';'

    '='  shift, and go to state 69


State 45

   13 ListTypVar: ListTypVar ',' TYPE • IDENT

    IDENT  shift, and go to state 70


State 46

   20 Affectation: '=' • Exp

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    Exp     go to state 71
    TB      go to state 60
    FB      go to state 61
    M       go to state 62
    E       go to state 63
    T       go to state 64
    F       go to state 65
    LValue  go to state 66


State 47

   19 DeclarateursLoc: IDENT Affectation •

    $default  reduce using rule 19 (DeclarateursLoc)


State 48

   16 DeclarVarLoc: DeclarVarLoc TYPE DeclarateursLoc ';' •

    $default  reduce using rule 16 (DeclarVarLoc)


State 49

   18 DeclarateursLoc: DeclarateursLoc ',' • IDENT Affectation

    IDENT  shift, and go to state 72


State 50

   25 Instr: IF '(' • Exp ')' Instr
   26      | IF '(' • Exp ')' Instr ELSE Instr

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    Exp     go to state 73
    TB      go to state 60
    FB      go to state 61
    M       go to state 62
    E       go to state 63
    T       go to state 64
    F       go to state 65
    LValue  go to state 66


State 51

   27 Instr: WHILE '(' • Exp ')' Instr

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    Exp     go to state 74
    TB      go to state 60
    FB      go to state 61
    M       go to state 62
    E       go to state 63
    T       go to state 64
    F       go to state 65
    LValue  go to state 66


State 52

   51 F: IDENT • '(' Arguments ')'
   52 LValue: IDENT •

    '('  shift, and go to state 75

    $default  reduce using rule 52 (LValue)


State 53

   48 F: NUM •

    $default  reduce using rule 48 (F)


State 54

   49 F: CHARACTER •

    $default  reduce using rule 49 (F)


State 55

   45 F: ADDSUB • F

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    F       go to state 76
    LValue  go to state 66


State 56

   30 Instr: RETURN ';' •

    $default  reduce using rule 30 (Instr)


State 57

   47 F: '(' • Exp ')'

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    Exp     go to state 77
    TB      go to state 60
    FB      go to state 61
    M       go to state 62
    E       go to state 63
    T       go to state 64
    F       go to state 65
    LValue  go to state 66


State 58

   46 F: '!' • F

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    F       go to state 78
    LValue  go to state 66


State 59

   29 Instr: RETURN Exp • ';'
   33 Exp: Exp • OR TB

    OR   shift, and go to state 79
    ';'  shift, and go to state 80


State 60

   34 Exp: TB •
   35 TB: TB • AND FB

    AND  shift, and go to state 81

    $default  reduce using rule 34 (Exp)


State 61

   36 TB: FB •
   37 FB: FB • EQ M

    EQ  shift, and go to state 82

    $default  reduce using rule 36 (TB)


State 62

   38 FB: M •
   39 M: M • ORDER E

    ORDER  shift, and go to state 83

    $default  reduce using rule 38 (FB)


State 63

   40 M: E •
   41 E: E • ADDSUB T

    ADDSUB  shift, and go to state 84

    $default  reduce using rule 40 (M)


State 64

   42 E: T •
   43 T: T • DIVSTAR F

    DIVSTAR  shift, and go to state 85

    $default  reduce using rule 42 (E)


State 65

   44 T: F •

    $default  reduce using rule 44 (T)


State 66

   50 F: LValue •

    $default  reduce using rule 50 (F)


State 67

   28 Instr: IDENT '(' • Arguments ')' ';'

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    $default  reduce using rule 54 (Arguments)

    Exp        go to state 86
    TB         go to state 60
    FB         go to state 61
    M          go to state 62
    E          go to state 63
    T          go to state 64
    F          go to state 65
    LValue     go to state 66
    Arguments  go to state 87
    ListExp    go to state 88


State 68

   22 SuiteInstr: SuiteInstr • Instr
   31 Instr: '{' SuiteInstr • '}'

    IF      shift, and go to state 36
    WHILE   shift, and go to state 37
    RETURN  shift, and go to state 38
    IDENT   shift, and go to state 39
    ';'     shift, and go to state 40
    '{'     shift, and go to state 41
    '}'     shift, and go to state 89

    Instr   go to state 43
    LValue  go to state 44


State 69

   24 Instr: LValue '=' • Exp ';'

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    Exp     go to state 90
    TB      go to state 60
    FB      go to state 61
    M       go to state 62
    E       go to state 63
    T       go to state 64
    F       go to state 65
    LValue  go to state 66


State 70

   13 ListTypVar: ListTypVar ',' TYPE IDENT •

    $default  reduce using rule 13 (ListTypVar)


State 71

   20 Affectation: '=' Exp •
   33 Exp: Exp • OR TB

    OR  shift, and go to state 79

    $default  reduce using rule 20 (Affectation)


State 72

   18 DeclarateursLoc: DeclarateursLoc ',' IDENT • Affectation

    '='  shift, and go to state 46

    $default  reduce using rule 21 (Affectation)

    Affectation  go to state 91


State 73

   25 Instr: IF '(' Exp • ')' Instr
   26      | IF '(' Exp • ')' Instr ELSE Instr
   33 Exp: Exp • OR TB

    OR   shift, and go to state 79
    ')'  shift, and go to state 92


State 74

   27 Instr: WHILE '(' Exp • ')' Instr
   33 Exp: Exp • OR TB

    OR   shift, and go to state 79
    ')'  shift, and go to state 93


State 75

   51 F: IDENT '(' • Arguments ')'

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    $default  reduce using rule 54 (Arguments)

    Exp        go to state 86
    TB         go to state 60
    FB         go to state 61
    M          go to state 62
    E          go to state 63
    T          go to state 64
    F          go to state 65
    LValue     go to state 66
    Arguments  go to state 94
    ListExp    go to state 88


State 76

   45 F: ADDSUB F •

    $default  reduce using rule 45 (F)


State 77

   33 Exp: Exp • OR TB
   47 F: '(' Exp • ')'

    OR   shift, and go to state 79
    ')'  shift, and go to state 95


State 78

   46 F: '!' F •

    $default  reduce using rule 46 (F)


State 79

   33 Exp: Exp OR • TB

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    TB      go to state 96
    FB      go to state 61
    M       go to state 62
    E       go to state 63
    T       go to state 64
    F       go to state 65
    LValue  go to state 66


State 80

   29 Instr: RETURN Exp ';' •

    $default  reduce using rule 29 (Instr)


State 81

   35 TB: TB AND • FB

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    FB      go to state 97
    M       go to state 62
    E       go to state 63
    T       go to state 64
    F       go to state 65
    LValue  go to state 66


State 82

   37 FB: FB EQ • M

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    M       go to state 98
    E       go to state 63
    T       go to state 64
    F       go to state 65
    LValue  go to state 66


State 83

   39 M: M ORDER • E

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    E       go to state 99
    T       go to state 64
    F       go to state 65
    LValue  go to state 66


State 84

   41 E: E ADDSUB • T

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    T       go to state 100
    F       go to state 65
    LValue  go to state 66


State 85

   43 T: T DIVSTAR • F

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    F       go to state 101
    LValue  go to state 66


State 86

   33 Exp: Exp • OR TB
   56 ListExp: Exp •

    OR  shift, and go to state 79

    $default  reduce using rule 56 (ListExp)


State 87

   28 Instr: IDENT '(' Arguments • ')' ';'

    ')'  shift, and go to state 102


State 88

   53 Arguments: ListExp •
   55 ListExp: ListExp • ',' Exp

    ','  shift, and go to state 103

    $default  reduce using rule 53 (Arguments)


State 89

   31 Instr: '{' SuiteInstr '}' •

    $default  reduce using rule 31 (Instr)


State 90

   24 Instr: LValue '=' Exp • ';'
   33 Exp: Exp • OR TB

    OR   shift, and go to state 79
    ';'  shift, and go to state 104


State 91

   18 DeclarateursLoc: DeclarateursLoc ',' IDENT Affectation •

    $default  reduce using rule 18 (DeclarateursLoc)


State 92

   25 Instr: IF '(' Exp ')' • Instr
   26      | IF '(' Exp ')' • Instr ELSE Instr

    IF      shift, and go to state 36
    WHILE   shift, and go to state 37
    RETURN  shift, and go to state 38
    IDENT   shift, and go to state 39
    ';'     shift, and go to state 40
    '{'     shift, and go to state 41

    Instr   go to state 105
    LValue  go to state 44


State 93

   27 Instr: WHILE '(' Exp ')' • Instr

    IF      shift, and go to state 36
    WHILE   shift, and go to state 37
    RETURN  shift, and go to state 38
    IDENT   shift, and go to state 39
    ';'     shift, and go to state 40
    '{'     shift, and go to state 41

    Instr   go to state 106
    LValue  go to state 44


State 94

   51 F: IDENT '(' Arguments • ')'

    ')'  shift, and go to state 107


State 95

   47 F: '(' Exp ')' •

    $default  reduce using rule 47 (F)


State 96

   33 Exp: Exp OR TB •
   35 TB: TB • AND FB

    AND  shift, and go to state 81

    $default  reduce using rule 33 (Exp)


State 97

   35 TB: TB AND FB •
   37 FB: FB • EQ M

    EQ  shift, and go to state 82

    $default  reduce using rule 35 (TB)


State 98

   37 FB: FB EQ M •
   39 M: M • ORDER E

    ORDER  shift, and go to state 83

    $default  reduce using rule 37 (FB)


State 99

   39 M: M ORDER E •
   41 E: E • ADDSUB T

    ADDSUB  shift, and go to state 84

    $default  reduce using rule 39 (M)


State 100

   41 E: E ADDSUB T •
   43 T: T • DIVSTAR F

    DIVSTAR  shift, and go to state 85

    $default  reduce using rule 41 (E)


State 101

   43 T: T DIVSTAR F •

    $default  reduce using rule 43 (T)


State 102

   28 Instr: IDENT '(' Arguments ')' • ';'

    ';'  shift, and go to state 108


State 103

   55 ListExp: ListExp ',' • Exp

    IDENT      shift, and go to state 52
    NUM        shift, and go to state 53
    CHARACTER  shift, and go to state 54
    ADDSUB     shift, and go to state 55
    '('        shift, and go to state 57
    '!'        shift, and go to state 58

    Exp     go to state 109
    TB      go to state 60
    FB      go to state 61
    M       go to state 62
    E       go to state 63
    T       go to state 64
    F       go to state 65
    LValue  go to state 66


State 104

   24 Instr: LValue '=' Exp ';' •

    $default  reduce using rule 24 (Instr)


State 105

   25 Instr: IF '(' Exp ')' Instr •
   26      | IF '(' Exp ')' Instr • ELSE Instr

    ELSE  shift, and go to state 110

    $default  reduce using rule 25 (Instr)


State 106

   27 Instr: WHILE '(' Exp ')' Instr •

    $default  reduce using rule 27 (Instr)


State 107

   51 F: IDENT '(' Arguments ')' •

    $default  reduce using rule 51 (F)


State 108

   28 Instr: IDENT '(' Arguments ')' ';' •

    $default  reduce using rule 28 (Instr)


State 109

   33 Exp: Exp • OR TB
   55 ListExp: ListExp ',' Exp •

    OR  shift, and go to state 79

    $default  reduce using rule 55 (ListExp)


State 110

   26 Instr: IF '(' Exp ')' Instr ELSE • Instr

    IF      shift, and go to state 36
    WHILE   shift, and go to state 37
    RETURN  shift, and go to state 38
    IDENT   shift, and go to state 39
    ';'     shift, and go to state 40
    '{'     shift, and go to state 41

    Instr   go to state 111
    LValue  go to state 44


State 111

   26 Instr: IF '(' Exp ')' Instr ELSE Instr •

    $default  reduce using rule 26 (Instr)
